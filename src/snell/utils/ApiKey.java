/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  The ASF licenses this file to You
 * under the Apache License, Version 2.0 (the "License"); you may not
 * use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.  For additional information regarding
 * copyright in this work, please see the NOTICE file in the top level
 * directory of this distribution.
 */
package snell.utils;

import static org.apache.commons.codec.binary.Hex.encodeHexString;

import java.security.Key;

import com.google.common.base.Objects;
import com.google.common.base.Supplier;

/**
 * Utility Class used for Generating API Keys
 */
public final class ApiKey 
  extends KeyBase {

  ApiKey(byte[] key, int size) {
    super(key, size);
  }

  ApiKey(byte[] key, String alg, int size) {
    super(key, alg, size);
  }

  ApiKey(Key key, int size) {
    super(key, size);
  }

  ApiKey(Key key, String alg, int size) {
    super(key, alg, size);
  }

  ApiKey(Key key) {
    super(key);
  }

  ApiKey(String key, int size) {
    super(key, size);
  }

  ApiKey(String key, String alg, int size) {
    super(key, alg, size);
  }

  ApiKey(String key) {
    super(key);
  }

  /**
   * Generates a random string that can be used as an API Key.
   * The string is generated by creating a random array of 
   * bytes, generating an hmac, then hex encoding those.
   */ 
  public String generateNext() {
    int len = Math.min(20, size);
    byte[] buf = hmac(randomBytes(len));
    return encodeHexString(buf);
  }
  
  public Supplier<String> asSupplier() {
    return supplier(this);
  }
  
  public static ApiKey WEAK(byte[] key) {
    return new ApiKey(key,"HmacSHA1",20);
  }
  
  public static ApiKey WEAK(Key key) {
    return new ApiKey(key,"HmacSHA1",20);
  }
  
  public static ApiKey WEAK(String key) {
    return new ApiKey(key,"HmacSHA1",20);
  }
  
  public static ApiKey MEDIUM(byte[] key) {
    return new ApiKey(key,"HmacSHA256",256);
  }
  
  public static ApiKey MEDIUM(Key key) {
    return new ApiKey(key,"HmacSHA256",256);
  }
  
  public static ApiKey MEDIUM(String key) {
    return new ApiKey(key,"HmacSHA256",256);
  }
  
  public static ApiKey STRONG(byte[] key) {
    return new ApiKey(key,"HmacSHA512",512);
  }
  
  public static ApiKey STRONG(Key key) {
    return new ApiKey(key,"HmacSHA512",512);
  }
  
  public static ApiKey STRONG(String key) {
    return new ApiKey(key,"HmacSHA512",512);
  }
  
  public static Supplier<String> supplier(ApiKey key) {
    return new ApiKeySupplier(key);
  }

  public static Supplier<String> weakSupplier(byte[] key) {
    return new ApiKeySupplier(WEAK(key));
  }
  
  public static Supplier<String> weakSupplier(Key key) {
    return new ApiKeySupplier(WEAK(key));
  }
  
  public static Supplier<String> weakSupplier(String key) {
    return new ApiKeySupplier(WEAK(key));
  }
  
  public static Supplier<String> mediumSupplier(byte[] key) {
    return new ApiKeySupplier(MEDIUM(key));
  }
  
  public static Supplier<String> mediumSupplier(Key key) {
    return new ApiKeySupplier(MEDIUM(key));
  }
  
  public static Supplier<String> mediumSupplier(String key) {
    return new ApiKeySupplier(MEDIUM(key));
  }
  
  public static Supplier<String> strongSupplier(byte[] key) {
    return new ApiKeySupplier(STRONG(key));
  }
  
  public static Supplier<String> strongSupplier(Key key) {
    return new ApiKeySupplier(STRONG(key));
  }
  
  public static Supplier<String> strongSupplier(String key) {
    return new ApiKeySupplier(STRONG(key));
  }
    
  private static class ApiKeySupplier 
    implements Supplier<String> {
    private final ApiKey key;
    ApiKeySupplier(ApiKey key) {
      this.key = key;
    }
    public String get() {
      return key.generateNext();
    }
    @Override
    public int hashCode() {
      return Objects.hashCode(key);
    }
    @Override
    public boolean equals(Object obj) {
      if (this == obj) return true;
      if (obj == null) return false;
      if (getClass() != obj.getClass()) return false;
      ApiKeySupplier other = (ApiKeySupplier) obj;
      if (!Objects.equal(key,other.key)) return false;
      return true;
    }
  }

}
